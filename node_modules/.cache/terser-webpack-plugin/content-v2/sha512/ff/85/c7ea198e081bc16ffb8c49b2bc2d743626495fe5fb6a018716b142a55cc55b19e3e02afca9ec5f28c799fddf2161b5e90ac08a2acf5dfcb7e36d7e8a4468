{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{327:function(s,t,a){\"use strict\";a.r(t);var n=a(10),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"redis分布式锁\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis分布式锁\"}},[s._v(\"#\")]),s._v(\" Redis分布式锁\")]),s._v(\" \"),t(\"p\",[s._v(\"我们知道一般的分布式锁有Redis和ZK实现的等。\")]),s._v(\" \"),t(\"p\",[s._v(\"一般的实现方式有：\\n Redis + Lua\\n jedis客户端\\n lettuce 客户端\\n redission 客户端\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"如何防止锁过期\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何防止锁过期\"}},[s._v(\"#\")]),s._v(\" 如何防止锁过期\")]),s._v(\" \"),t(\"p\",[s._v(\"有时候在我们执行对应的业务的时候，还没有执行完成的时候，这个锁就过期了，那么就会导致另一个线程进来执行，这样就会导致提交两次的顺序可能出现问题\\n比如说A过期了，但是没有提交完，B进来了，然后执行完成提交，之后A在提交，这样就会导致出错。\")]),s._v(\" \"),t(\"p\",[s._v(\"所以我们一般都会对这个锁进行续期，比如Redission的做法。或者使用一个定时任务定时检测这个对应的锁的过期时间，然后定期给他续期。\")]),s._v(\" \"),t(\"p\",[s._v(\"不过这种做法在高并发情况下，对于你CPU的消耗非常大，每次执行一个请求过来的时候，你都要CPU去监听他。\")]),s._v(\" \"),t(\"p\",[s._v(\"所以我们可以在他这个分布式锁之上套一个本地锁，具体锁的逻辑就是对应的uuid+线程id+业务key。先用本地锁先挡住一部分的请求，然后在执行分布式锁的那一部分\\n这样就能够挡住大部分的流量。\")]),s._v(\" \"),t(\"p\",[s._v(\"redission中也是根据uuid+线程id进行对应的操作的。\")]),s._v(\" \"),t(\"p\",[s._v(\"续期操作：\\n当前线程加锁成功后，假设设置默认过期时间为30秒，会注册一个定时任务监听这个锁，\\n每隔30/3=10 秒就去查看这个锁，如果还持有锁，就对锁的过期时间继续续命30秒，如果\\n没持有锁，就取消定时任务。这个机制也被叫做看门狗机制。以下是伪代码实现：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[s._v(\"ttlRemainingFuture\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"addListener\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"FutureListener\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Boolean\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\" \\n\"),t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@Override\")]),s._v(\" \\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"operationComplete\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Future\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Boolean\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" future\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"throws\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Exception\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"            \\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 定时任务执行方法,传入当前线程id，只对当前线程id进行续期 \")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"scheduleExpirationRenewal\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"threadId\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"scheduleExpirationRenewal\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"final\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" threadId\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\" \\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 这里new了一个TimerTask()定时任务器,定时任务会推迟执行，推迟的时间是设置\")]),s._v(\"\\n为锁过期时间的\"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"/\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),s._v(\" \\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" internalLockLeaseTime  \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\"  \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"30\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Timeout\")]),s._v(\" task \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" commandExecutor\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getConnectionManager\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"newTimeout\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\"   \\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"TimerTask\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\" \\n\"),t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@Override\")]),s._v(\" \\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"run\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Timeout\")]),s._v(\" timeout\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"throws\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Exception\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\" \\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//执行业务逻辑 \")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"  \\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" internalLockLeaseTime \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"/\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"TimeUnit\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"MILLISECONDS\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),t(\"br\")])]),t(\"h2\",{attrs:{id:\"分布式下如何防止主节点和从节点数据不一致性锁失效\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分布式下如何防止主节点和从节点数据不一致性锁失效\"}},[s._v(\"#\")]),s._v(\" 分布式下如何防止主节点和从节点数据不一致性锁失效\")]),s._v(\" \"),t(\"p\",[s._v(\"有一种情况下就是你设置锁，他给到master设置了，但是这个时候这个master节点突然就宕机了，这个概率虽然是很低的\\n但是还是可能会发生这种情况。\")]),s._v(\" \"),t(\"p\",[s._v(\"这种情况我们一般如何解决呢？可以参考zookeeper的分布式锁，因为ZK的锁是他只有所有节点的一半多一个，也就是N/2+1个节点加锁成功以后，\\n他才会给你加锁成功。当然Redission中的红锁也是这种思路，所以可以采用红锁进行实现。\\n但是呢，为了这么低的一个概率引入一个Redission中的红锁，这显然是得不偿失的，如果真要解决这种问题的话，建议还是直接使用ZK进行枷锁。\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"如何实现分布式锁的可重入\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何实现分布式锁的可重入\"}},[s._v(\"#\")]),s._v(\" 如何实现分布式锁的可重入\")]),s._v(\" \"),t(\"p\",[s._v(\"我们在分布式中实现对应的分布式锁的可重入可以参照本地锁的可重入锁实现方式。\\n本地锁的可重入参照对应的AQS的实现方式。\\n首先他会判断你这个锁是否被持有，如果是被持有的情况下他会判断是否是当前线程持有，如果是当前线程持有的话，那么就加锁成功，否则就加锁失败。\\n这样就能够在加锁上实现可重入锁。\")]),s._v(\" \"),t(\"p\",[s._v(\"释放锁方面也同样，定义一个进入次数，redis中incr，然后判断他是否为0，如果为0的话就删除这个锁，否则就decr操作。\\n这样就能够进行减减操作。\")]),s._v(\" \"),t(\"p\",[s._v(\"通过这样的方式就能够实现对应的分布式可重入锁了。\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"如何方式redis的分布式锁死锁\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何方式redis的分布式锁死锁\"}},[s._v(\"#\")]),s._v(\" 如何方式Redis的分布式锁死锁\")]),s._v(\" \"),t(\"p\",[s._v(\"加锁的时候给对应的锁设置一个过期时间，redis的服务器会定时检测这个key，如果过期了他会自动释放掉，那么这个锁也就释放掉了，也就解决了死锁的问题。\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"分布式细粒度锁\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分布式细粒度锁\"}},[s._v(\"#\")]),s._v(\" 分布式细粒度锁\")]),s._v(\" \"),t(\"p\",[s._v(\"在高并发下，如果有多个请求一起过来的话，我们如果一个一个加锁，那么会非常影响效率，所以我们可以设置一个粒度更细一点的锁，\\n比如那商品举例，一共有1000个，我们可以给这个锁加上对应的库存数，但是要设置1000个key，可能还是有点多，所以我们可以设置固定数量的锁，比方说50个，我们就那库存去/50，然后去hash或者其他操作，生成对应的锁。\\n这样就可以形成一个分段锁。通过这样的方式也能够优化这个高并发下的分布式锁。\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"常见的分布式锁\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常见的分布式锁\"}},[s._v(\"#\")]),s._v(\" 常见的分布式锁\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"Mysql实现的分布式锁(效率低)\")]),s._v(\" \"),t(\"li\",[s._v(\"Redis实现的分布式锁\")]),s._v(\" \"),t(\"li\",[s._v(\"ZK实现的分布式锁\")])])])}),[],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}